// src/app/models/smart-device.model.ts
export interface SmartDevice {
  id?: number;
  name: string;
  category: string;
  brand: string;
  price: number;
  description: string;
  compatibility: string[];
  stock: number;
  warranty: string;
}


// src/app/services/smart-device.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { SmartDevice } from '../models/smart-device.model';

@Injectable({ providedIn: 'root' })
export class SmartDeviceService {
  private baseUrl = 'https://ide---------------------------------------.project.examly.io/proxy/8080';

  constructor(private http: HttpClient) {}

  createSmartDevice(device: SmartDevice): Observable<SmartDevice> {
    console.log('Creating Smart Device:', device);
    return this.http.post<SmartDevice>(`${this.baseUrl}/smart-devices`, device);
  }

  getSmartDevices(): Observable<SmartDevice[]> {
    return this.http.get<SmartDevice[]>(`${this.baseUrl}/smart-devices`);
  }

  deleteSmartDevice(id: number): Observable<void> {
    console.log('Deleting Smart Device with ID:', id);
    return this.http.delete<void>(`${this.baseUrl}/smart-devices/${id}`);
  }
}


// src/app/components/add-smart-device-form/add-smart-device-form.component.ts
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { SmartDeviceService } from '../../services/smart-device.service';
import { SmartDevice } from '../../models/smart-device.model';

@Component({
  selector: 'app-add-smart-device-form',
  templateUrl: './add-smart-device-form.component.html'
})
export class AddSmartDeviceFormComponent {
  newSmartDevice: SmartDevice = this.initializeSmartDevice();
  errorMessage: string = '';

  initializeSmartDevice(): SmartDevice {
    return {
      name: '', 
      category: '', brand: '', price: 0,
      description: '', compatibility: [], stock: 0, warranty: ''
    };
  }

  constructor(private service: SmartDeviceService, private router: Router) {}

  saveSmartDevice(form: any): void {
    if (form.valid && this.newSmartDevice.compatibility.length > 0) {
      this.service.createSmartDevice(this.newSmartDevice).subscribe({
        next: () => {
          this.resetForm(form);
          this.router.navigate(['/viewSmartDevices']);
        },
        error: () => {
          this.errorMessage = 'Failed to add smart device';
        }
      });
    } else {
      this.errorMessage = 'Please fill in all required fields';
    }
  }

  resetForm(form: any): void {
    form.reset();
    this.newSmartDevice = this.initializeSmartDevice();
  }

  

  updateCompatibility(option: string, event: Event): void {
    const checked = (event.target as HTMLInputElement).checked;
    if (checked) {
      this.newSmartDevice.compatibility.push(option);
    } else {
      this.newSmartDevice.compatibility = this.newSmartDevice.compatibility.filter(c => c !== option);
    }
  }
}


// src/app/components/add-smart-device-form/add-smart-device-form.component.html
<h2>Add Smart Device</h2>
<form (ngSubmit)="saveSmartDevice(form)" #form="ngForm">
  <label>Device Name:<input id="name" name="name" [(ngModel)]="newSmartDevice.name" required /></label>
  <div *ngIf="form.submitted && !newSmartDevice.name">Device name is required</div>

  <label>Category:<input id="category" name="category" [(ngModel)]="newSmartDevice.category" required /></label>
  <div *ngIf="form.submitted && !newSmartDevice.category">Category is required</div>

  <label>Brand:<input id="brand" name="brand" [(ngModel)]="newSmartDevice.brand" required /></label>
  <div *ngIf="form.submitted && !newSmartDevice.brand">Brand is required</div>

  <label>Price ($):<input id="price" type="number" name="price" [(ngModel)]="newSmartDevice.price" required min="0" /></label>
  <div *ngIf="form.submitted && !newSmartDevice.price">Price is required</div>

  <label>Description:<textarea id="description" name="description" [(ngModel)]="newSmartDevice.description" required></textarea></label>
  <div *ngIf="form.submitted && !newSmartDevice.description">Description is required</div>

  <label>Compatibility:</label>
  <label><input type="checkbox" value="Alexa" (change)="updateCompatibility('Alexa', $event)" /> Alexa</label>
  <label><input type="checkbox" value="Google Assistant" (change)="updateCompatibility('Google Assistant', $event)" /> Google Assistant</label>
  <label><input type="checkbox" value="Apple HomeKit" (change)="updateCompatibility('Apple HomeKit', $event)" /> Apple HomeKit</label>
  <div *ngIf="form.submitted && newSmartDevice.compatibility.length === 0">At least one compatibility option is required</div>

  <label>Stock Quantity:<input id="stock" type="number" name="stock" [(ngModel)]="newSmartDevice.stock" required min="0" /></label>
  <div *ngIf="form.submitted && !newSmartDevice.stock">Stock quantity is required</div>

  <label>Warranty:<input id="warranty" name="warranty" [(ngModel)]="newSmartDevice.warranty" required /></label>
  <div *ngIf="form.submitted && !newSmartDevice.warranty">Warranty is required</div>

  <button type="submit">Add Smart Device</button>
  <div *ngIf="errorMessage">{{ errorMessage }}</div>
</form>


// src/app/components/smart-device-list/smart-device-list.component.ts
import { Component, OnInit } from '@angular/core';
import { SmartDeviceService } from '../../services/smart-device.service';
import { SmartDevice } from '../../models/smart-device.model';

@Component({
  selector: 'app-smart-device-list',
  templateUrl: './smart-device-list.component.html'
})
export class SmartDeviceListComponent implements OnInit {
  devices: SmartDevice[] = [];
  filteredDevices: SmartDevice[] = [];
  selectedCompatibility: string = '';
  compatibilityOptions = ['Alexa', 'Google Assistant', 'Apple HomeKit'];

  constructor(private service: SmartDeviceService) {}

  ngOnInit(): void {
    this.loadDevices();
  }

  loadDevices(): void {
    this.service.getSmartDevices().subscribe(devices => {
      this.devices = devices;
      this.applyFilter();
    });
  }

  applyFilter(): void {
    this.filteredDevices = this.selectedCompatibility
      ? this.devices.filter(d => d.compatibility.includes(this.selectedCompatibility))
      : this.devices;
  }

  deleteDevice(id: number): void {
    this.service.deleteSmartDevice(id).subscribe({
      next: () => this.loadDevices(),
      error: () => console.error('Failed to delete device')
    });
  }
}


// src/app/components/smart-device-list/smart-device-list.component.html
<h2>Smart Home Devices</h2>
<div class="filter-container">
  <label for="filterCompatibility">Filter by Compatibility:</label>
  <select id="filterCompatibility" [(ngModel)]="selectedCompatibility" (change)="applyFilter()">
    <option value="">All</option>
    <option *ngFor="let option of compatibilityOptions" [value]="option">{{ option }}</option>
  </select>
</div>

<table class="device-table">
  <thead>
    <tr>
      <th>Device Name</th><th>Category</th><th>Brand</th><th>Price ($)</th>
      <th>Compatibility</th><th>Stock</th><th>Warranty</th><th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let device of filteredDevices">
      <td>{{ device.name }}</td>
      <td>{{ device.category }}</td>
      <td>{{ device.brand }}</td>
      <td>{{ device.price }}</td>
      <td>{{ device.compatibility.join(', ') }}</td>
      <td>{{ device.stock }}</td>
      <td>{{ device.warranty }}</td>
      <td><button id="delete" class="delete-button" (click)="deleteDevice(device.id)">Delete</button></td>
    </tr>
  </tbody>
</table>
<div class="no-items-message" *ngIf="filteredDevices.length === 0">No matching smart devices found.</div>


// src/app/app-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AddSmartDeviceFormComponent } from './components/add-smart-device-form/add-smart-device-form.component';
import { SmartDeviceListComponent } from './components/smart-device-list/smart-device-list.component';

const routes: Routes = [
  { path: '', redirectTo: '/viewSmartDevices', pathMatch: 'full' },
  { path: 'addNewSmartDevice', component: AddSmartDeviceFormComponent },
  { path: 'viewSmartDevices', component: SmartDeviceListComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}


// src/app/app.component.html
<h1>HomeTech</h1>
<nav>
  <a routerLink="/addNewSmartDevice">Add New Smart Device</a> |
  <a routerLink="/viewSmartDevices">View Smart Devices</a>
</nav>
<router-outlet></router-outlet>
