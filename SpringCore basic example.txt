<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.training</groupId>
  <artifactId>demoonspringcore</artifactId>
  <version>1.0</version>

  <name>demoonspringcore</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
  </properties>

  <dependencies>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-core</artifactId>
    <version>5.3.35</version>
</dependency>

<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.3.35</version>
</dependency>
  
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>



applicationContext.xml:
=======================
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    
<bean id="message" class="com.training.model.Message">
<property name="msg" value="Welcome to spring framework"></property>

</bean>



</beans>

=================
model:
=======
package com.training.model;

public class Message {

    String msg;

    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

    
}


App.java
---------
package com.training;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.training.model.Message;

public class App 
{
    public static void main( String[] args )
    {
    //loading congfiguration file into spring ioc container named Application Context
   ApplicationContext  context = new ClassPathXmlApplicationContext("applicationContext.xml");
        
   //getting the bean object which is created by  Container based on the Id we use method called getBean()

    Message mobj=      context.getBean("message",Message.class);

     System.out.println(mobj.getMsg());
    }
}



============
javaConfiguration
-----------------
package com.training.model;

public class Employee {

   private int empId;
   private String empName;
   private  int empSal;
   public Employee() {
   }
   public Employee(int empId, String empName, int empSal) {
    this.empId = empId;
    this.empName = empName;
    this.empSal = empSal;
   }
   public int getEmpId() {
    return empId;
   }
   public void setEmpId(int empId) {
    this.empId = empId;
   }
   public String getEmpName() {
    return empName;
   }
   public void setEmpName(String empName) {
    this.empName = empName;
   }
   public int getEmpSal() {
    return empSal;
   }
   public void setEmpSal(int empSal) {
    this.empSal = empSal;
   }

   


}



Configuration:
==============
package com.training.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.training.model.Employee;

@Configuration
public class SpringConfig {

  
    @Bean
    public Employee getEmployeeObject(){
      Employee emp= new Employee();
      emp.setEmpId(101);
      emp.setEmpName("rakesh");
      emp.setEmpSal(400);
     return emp;

    }


}


App class:
===========
package com.training;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.training.config.SpringConfig;
import com.training.model.Employee;
import com.training.model.Message;
import com.training.model.Product;

public class App 
{
    public static void main( String[] args )
    {
    //loading congfiguration file into spring ioc container named Application Context
   ApplicationContext  context = new ClassPathXmlApplicationContext("applicationContext.xml");
        
   //getting the bean object which is created by  Container based on the Id we use method called getBean()

    Message mobj=      context.getBean("message",Message.class);

     System.out.println(mobj.getMsg());


    Product pobj= context.getBean("product",Product.class);
              System.out.println("Product Details are :");
              System.out.println(pobj.getProductId());
              System.out.println(pobj.getProductName());
              System.out.println(pobj.getPrice());



     //loading the java configuartion file SpringConfig.java into application context
     System.out.println("using java configuration");
      ApplicationContext context2 = new AnnotationConfigApplicationContext(SpringConfig.class);
     Employee eobj= context2.getBean("getEmployeeObject",Employee.class);
     System.out.println(eobj.getEmpId());
     System.out.println(eobj.getEmpName());
     System.out.println(eobj.getEmpSal());

    }
}
