package com.example.springappdatajpa.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity

public class Product {
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int productId;
    private String productName;
    private double price;
    public Product() {
    }
    public Product(int productId, String productName, double price) {
        this.productId = productId;
        this.productName = productName;
        this.price = price;
    }
    public int getProductId() {
        return productId;
    }
    public void setProductId(int productId) {
        this.productId = productId;
    }
    public String getProductName() {
        return productName;
    }
    public void setProductName(String productName) {
        this.productName = productName;
    }
    public double getPrice() {
        return price;
    }
    public void setPrice(double price) {
        this.price = price;
    }




}


====================

package com.example.springappdatajpa.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.springappdatajpa.model.Product;

@Repository
public interface ProductRepo extends JpaRepository<Product,Integer> {
   List<Product> findByProductName(String productName);
}


=================
package com.example.springappdatajpa.exception;

public class DuplicateRecordAlreayExist  extends Exception{
   public DuplicateRecordAlreayExist(String msg){
             super(msg);
   }

}
package com.example.springappdatajpa.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import com.example.springappdatajpa.model.Product;

@ControllerAdvice
public class GlobalException {

    @ExceptionHandler(ProductNotFoundException.class)
    public ResponseEntity<String>  handleProductException(ProductNotFoundException pe){
    //return new ResponseEntity<>(pe.getMessage(),HttpStatus.NOT_FOUND);
   return ResponseEntity.status(404).body(pe.getMessage());
    }

    @ExceptionHandler(DuplicateRecordAlreayExist.class)
    public ResponseEntity<String>  handleDuplication(DuplicateRecordAlreayExist pe){
    //return new ResponseEntity<>(pe.getMessage(),HttpStatus.NOT_FOUND);
   return ResponseEntity.status(404).body(pe.getMessage());
    }

}

package com.example.springappdatajpa.exception;

public class ProductNotFoundException  extends Exception{
   public ProductNotFoundException(String msg){
             super(msg);
   }

}





======================
package com.example.springappdatajpa.service;
import com.example.springappdatajpa.exception.DuplicateRecordAlreayExist;
import com.example.springappdatajpa.exception.ProductNotFoundException;
import com.example.springappdatajpa.model.Product;

public interface ProductService {

   public abstract Product createProducct(Product product)throws DuplicateRecordAlreayExist;
   public Product  getProductById(int productId)throws ProductNotFoundException;
   public String    deleteProductById(int productId)throws ProductNotFoundException;


}



====================
package com.example.springappdatajpa.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.springappdatajpa.exception.DuplicateRecordAlreayExist;
import com.example.springappdatajpa.exception.ProductNotFoundException;
import com.example.springappdatajpa.model.Product;
import com.example.springappdatajpa.repository.ProductRepo;

@Service
public class ProductServiceImpl  implements ProductService{
   @Autowired
   private ProductRepo pRepo;

    @Override
    public Product createProducct(Product product) throws DuplicateRecordAlreayExist{
    //before adding the before; check it if already exist,then throw the exception
    ///ProductNotFoundException  ("Product 1212 already exist!")
    
   //Optional<Product>  optPrd =   pRepo.findById(product.getProductId());
    List<Product>  lit=  pRepo.findByProductName(product.getProductName());
    if(!lit.isEmpty()){
        throw new DuplicateRecordAlreayExist("Product "+product.getProductName()+" AlreadyExist.");
    }


   return   pRepo.save(product);
    
    }

    @Override
    public Product getProductById(int productId) throws ProductNotFoundException{
      Optional<Product> pOptional = pRepo.findById(productId);

       if(pOptional.isPresent()){
          return pOptional.get();
       }else{
        throw new ProductNotFoundException("Product"+ productId+ " Not Found");
       }

        }

    @Override
    public String deleteProductById(int productId) throws ProductNotFoundException {
        Optional<Product> pOptional = pRepo.findById(productId);

       if(pOptional.isPresent()){
            pRepo.deleteById(productId);
            return "Deleted Record "+productId+" successfully!.";
       }else{
        throw new ProductNotFoundException("Product "+productId+"Not Found");
     }

    
    }

}
====================
package com.example.springappdatajpa.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.springappdatajpa.exception.DuplicateRecordAlreayExist;
import com.example.springappdatajpa.model.Product;
import com.example.springappdatajpa.service.ProductService;

@RestController
public class ProductController {

@Autowired
private  ProductService pService;

@PostMapping("/api/product")
public ResponseEntity<Product> addProduct(@RequestBody Product product) throws DuplicateRecordAlreayExist{
  Product p = pService.createProducct(product);
  return new ResponseEntity<>(p,HttpStatus.CREATED);

}


}

